//클라이언트 멤버 이름 나이 클레스넘버를 입력받아 class3에 해당하는 사람들끼리만 채팅할 수 있는 프로그램

#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdlib.h>
#include <sys/time.h>
#include <unistd.h>
#include <sys/select.h>
#include<fcntl.h>

#define SERV_TCP_PORT 12350
#define SERV_ADDR "165.246.38.152"

void handle_protocol(int x, fd_set * pset);
void handle_state_1(int x, fd_set *pset, char *buf, int state[]);
void handle_state_2(int x, fd_set *pset, char *buf, int state[]);
void handle_state_3(int x, fd_set *pset, char *buf, int state[]);
void handle_state_4(int x, fd_set *pset, char *buf, int state[]);
void handle_state_5(int x, fd_set *pset, char *buf, int state[]);

int state[50];

struct client{
   char name[50];
   char age[10];
   char cls[10];
   int partner;
};

struct client cli[50];

void main(){
   int s1,s2, i, x, y;
   struct sockaddr_in serv_addr, cli_addr;
   char buf[50];
   socklen_t  xx;

   printf("Hi, I am the server\n");
   
   bzero((char *)&serv_addr, sizeof(serv_addr));
   serv_addr.sin_family=PF_INET;
   serv_addr.sin_addr.s_addr=inet_addr(SERV_ADDR);
   serv_addr.sin_port=htons(SERV_TCP_PORT);

   //open a tcp socket
   if ((s1=socket(PF_INET, SOCK_STREAM, 0))<0){
      printf("socket creation error\n");
      exit(1);
   }
   printf("socket opened successfully. socket num is %d\n", s1);

   // bind ip
   x =bind(s1, (struct sockaddr *)&serv_addr, sizeof(serv_addr));
   if (x < 0){
      printf("binding failed\n");
      exit(1);
   }
   printf("binding passed\n");
   listen(s1, 5);
   xx = sizeof(cli_addr);

   // now start ping-pong-pang-pung
   // pset remembers all sockets to monitor
   // rset is the copy of pset passed to select
   fd_set rset, pset;
   int maxfd=50; // just monitor max 50 sockets

   FD_ZERO(&rset); // init rset
   FD_ZERO(&pset); // init pset

   // step 1. monitor conn req packet
   FD_SET(s1, &pset);
   // and loop on select
   for(i=0;i<20;i++){ // should be infinite loop in real life
      rset=pset;  // step 2
      select(maxfd, &rset, NULL, NULL, NULL); // step 3
      // now we have some packets
      for(x=0;x<maxfd;x++){ // check which socket has a packet
         if (FD_ISSET(x, &rset)){ // socket x has a packet
            // s1 is a special socket for which we have to do "accept"
            // otherwise do ping-pong-pang-pung
            if (x==s1){ // new client has arrived
               // create a socket for this client
               s2 = accept(s1, (struct sockaddr *)&cli_addr, &xx);
               printf("new cli at socket %d\n",s2);
               state[s2]=1;
               FD_SET(s2, &pset); // and include this socket in pset 
            }else{ // data packet. do ping-pong-pang-pung protocol
               handle_protocol(x, &pset);
            }
         }
      }
   }
}
void handle_protocol(int x, fd_set * pset){
// we have a data packet in socket x. do protocol
   int y; char buf[50];
   y=read(x, buf, 50); // read data
   buf[y]=0; // make it a string
   if (state[x]==1){ // if it is a ping
        handle_state_1(x,pset,buf,state);
   }
   else if (state[x]==2){ // it it is a pang
        handle_state_2(x,pset,buf,state);
   }
   else if(state[x]==3){
        handle_state_3(x,pset,buf,state);
   }
   else if(state[x]==4){
        handle_state_4(x,pset,buf,state);
   }
   else if(state[x]==5){
        handle_state_5(x,pset,buf,state);
   }
}

void handle_state_1(int x, fd_set *pset, char *buf, int state[]){
   if(strcmp(buf,"hello")==0){
        printf("cli %d -> serv : %s\n",x,buf);
        write(x,"name age class number?",21);
        printf("serv -> cli %d : name age class number?\n",x);
        state[x]=2;
   }
   else{
       close(x);
       FD_CLR(x,pset);
   }
}

void handle_state_2(int x, fd_set *pset, char *buf, int state[]){
   printf("cli -> serv : %s\n",buf);
   char *str[20];
   str[0]=strtok(buf," ");
   int k=0;
   for(;;){
      k++;
      str[k]=strtok(NULL," ");
      if(str[k]==NULL) break;
   }

   if(strcmp(str[2],"class3")!=0){
      printf("serv -> cli %s : disconnecting this chatting is for class3\n",cli[x].name);
      write(x,"no",2);
      close(x);
      FD_CLR(x,pset);
   }

   else{
      strcpy(cli[x].name,str[0]);
      strcpy(cli[x].age,str[1]);
      strcpy(cli[x].cls,str[2]);
      printf("serv -> cli %s: Ready?\n",cli[x].name);
      write(x,"ready?",6);
      state[x]=3;
   }
}

void handle_state_3(int x, fd_set *pset, char *buf, int state[]){
   if(strcmp(buf,"yes")==0){
        printf("cli %s -> serv : %s\n",cli[x].name,buf);
        char sbuf[100];
        strcpy(sbuf,"client name list : ");
        int i;
        for(i=0; i<50; i++){
             if(state[x]>=3&& x!=i){
                  sprintf(sbuf,"%s %s",sbuf,cli[i].name);
             }
        }
        printf("serv -> cli %s : %s\n",cli[x].name,sbuf);
        write(x,sbuf,strlen(sbuf));
        state[x]=4;
   }
   else{
        close(x);
        FD_CLR(x,pset);
   }
}
void handle_state_4(int x, fd_set *pset, char *buf, int state[]){
   printf("cli %s -> serv : %s\n",cli[x].name,buf);
   int i;
   for(i=0; i<50; i++){
      if(strcmp(buf,cli[i].name)==0){
         cli[x].partner=i;
         break;
      }
   }
   printf("serv -> cli %s : go\n",cli[x].name);
   write(x,"go",2);
   state[x]=5;
}

void handle_state_5(int x, fd_set *pset, char *buf, int state[]){
   int p= cli[x].partner;
   char sbuf[50];
   printf("cli %s -> serv : %s\n",cli[x].name,buf);
   sprintf(sbuf,"serv -> cli %s : (from %s %s to %s %s) %s\n",cli[p].name, cli[x].name, cli[x].age, cli[p].name, cli[p].age, buf);
   write(p,sbuf,strlen(sbuf));
}
